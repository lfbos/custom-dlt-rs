# Custom Blockchain Network
# This docker-compose file creates a complete blockchain network with:
# - 3 nodes (seed node + 2 peers)
# - 2 miners (competing for blocks)
# - Shared volumes for data persistence
#
# Configuration:
# - Use environment variables (see docker-compose.yml environment sections)
# - Optional: Create config.json and uncomment volume mounts to use JSON config

services:
  # =============================================================================
  # Node 1: Seed Node (Main node that others connect to)
  # =============================================================================
  node1:
    build:
      context: .
      target: node
    container_name: blockchain-node1
    hostname: node1
    ports:
      - "${NODE1_PORT:-9000}:9000"  # Configurable via env var
    volumes:
      - node1-data:/data
      # To use config.json: Create config.json in project root and uncomment:
      # - ./config.json:/app/config.json:ro
    environment:
      - NODE_PORT=9000
      - BLOCKCHAIN_FILE=/data/blockchain.cbor
      - NETWORK_ID=${NETWORK_ID:-mainnet}
      - IDEAL_BLOCK_TIME=${IDEAL_BLOCK_TIME:-10}
      - DIFFICULTY_UPDATE_INTERVAL=${DIFFICULTY_UPDATE_INTERVAL:-50}
      - MAX_MEMPOOL_TX_AGE=${MAX_MEMPOOL_TX_AGE:-600}
      - BLOCK_TX_CAP=${BLOCK_TX_CAP:-20}
      - RUST_LOG=${RUST_LOG:-info}
      - RUST_BACKTRACE=${RUST_BACKTRACE:-1}
    networks:
      blockchain-net:
        ipv4_address: 172.25.0.10
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "netstat -an | grep 9000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  # =============================================================================
  # Node 2: Peer Node (Connects to node1)
  # =============================================================================
  node2:
    build:
      context: .
      target: node
    container_name: blockchain-node2
    hostname: node2
    ports:
      - "${NODE2_PORT:-9001}:9001"
    volumes:
      - node2-data:/data
      # To use config.json: Create config.json in project root and uncomment:
      # - ./config.json:/app/config.json:ro
    environment:
      - NODE_PORT=9001
      - BLOCKCHAIN_FILE=/data/blockchain.cbor
      - INITIAL_PEERS=172.25.0.10:9000
      - NETWORK_ID=${NETWORK_ID:-mainnet}
      - RUST_LOG=${RUST_LOG:-info}
    networks:
      blockchain-net:
        ipv4_address: 172.25.0.11
    depends_on:
      node1:
        condition: service_healthy
    restart: unless-stopped

  # =============================================================================
  # Node 3: Peer Node (Connects to node1 and node2)
  # =============================================================================
  node3:
    build:
      context: .
      target: node
    container_name: blockchain-node3
    hostname: node3
    ports:
      - "${NODE3_PORT:-9002}:9002"
    volumes:
      - node3-data:/data
      # To use config.json: Create config.json in project root and uncomment:
      # - ./config.json:/app/config.json:ro
    environment:
      - NODE_PORT=9002
      - BLOCKCHAIN_FILE=/data/blockchain.cbor
      - INITIAL_PEERS=172.25.0.10:9000,172.25.0.11:9001
      - NETWORK_ID=${NETWORK_ID:-mainnet}
      - RUST_LOG=${RUST_LOG:-info}
    networks:
      blockchain-net:
        ipv4_address: 172.25.0.12
    depends_on:
      node1:
        condition: service_healthy
      node2:
        condition: service_started
    restart: unless-stopped

  # =============================================================================
  # Miner 1: First miner (connects to node1)
  # =============================================================================
  miner1:
    build:
      context: .
      target: miner
    container_name: blockchain-miner1
    hostname: miner1
    volumes:
      - miner1-keys:/keys
    environment:
      - MINER_NODE_ADDRESS=172.25.0.10:9000
      - MINER_PUBLIC_KEY=/keys/miner1.pub.pem
      - MINING_BATCH_SIZE=${MINING_BATCH_SIZE:-2000000}
      - TEMPLATE_FETCH_INTERVAL=${TEMPLATE_FETCH_INTERVAL:-5}
      - NETWORK_ID=${NETWORK_ID:-mainnet}
      - RUST_LOG=${RUST_LOG:-info}
    networks:
      - blockchain-net
    depends_on:
      node1:
        condition: service_healthy
    restart: unless-stopped

  # =============================================================================
  # Miner 2: Second miner (connects to node2 for diversity)
  # =============================================================================
  miner2:
    build:
      context: .
      target: miner
    container_name: blockchain-miner2
    hostname: miner2
    volumes:
      - miner2-keys:/keys
    environment:
      - MINER_NODE_ADDRESS=172.25.0.11:9001
      - MINER_PUBLIC_KEY=/keys/miner2.pub.pem
      - MINING_BATCH_SIZE=${MINING_BATCH_SIZE:-2000000}
      - TEMPLATE_FETCH_INTERVAL=${TEMPLATE_FETCH_INTERVAL:-5}
      - NETWORK_ID=${NETWORK_ID:-mainnet}
      - RUST_LOG=${RUST_LOG:-info}
    networks:
      - blockchain-net
    depends_on:
      node2:
        condition: service_started
    restart: unless-stopped

  # =============================================================================
  # Utilities: Helper container for key generation and blockchain inspection
  # =============================================================================
  utils:
    build:
      context: .
      target: utilities
    container_name: blockchain-utils
    volumes:
      - miner1-keys:/keys/miner1
      - miner2-keys:/keys/miner2
      - alice-keys:/keys/alice
      - bob-keys:/keys/bob
      - node1-data:/data/node1
      - node2-data:/data/node2
      - node3-data:/data/node3
    networks:
      - blockchain-net
    profiles:
      - utils  # Only starts when explicitly requested
    command: ["/bin/bash"]
    stdin_open: true
    tty: true

# =============================================================================
# Networks
# =============================================================================
networks:
  blockchain-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# =============================================================================
# Volumes (persistent storage)
# =============================================================================
volumes:
  # Node data
  node1-data:
    driver: local
  node2-data:
    driver: local
  node3-data:
    driver: local
  
  # Miner keys
  miner1-keys:
    driver: local
  miner2-keys:
    driver: local
  
  # Wallet keys (for future use)
  alice-keys:
    driver: local
  bob-keys:
    driver: local

